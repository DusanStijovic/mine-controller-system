RoomModel InterrupSensorModel {

	import etrice.api.types.*
	import etrice.api.timer.PTimer

	eventdriven ActorClass InterruptSensor {

		Interface {
			Port outputEvent: EventHappened
			conjugated Port inputEvent: EventHappened
		}

		Structure {
			usercode1 '''
				import java.util.Date;
				import java.util.Calendar;
			'''
			usercode2 '''
				private static int PERIOD_OF_ACTIVATION_MS = 5000;
				private boolean eventHappened = false;
				private long worstExecutionTime = 0;
				private long nextActivation = 0;
				
				private int calculateWaitTime(long nextActivationInMs){
					long waitTime = nextActivationInMs - System.currentTimeMillis();
					waitTime = Math.max(waitTime, 0);
					return (int)waitTime;
				}
			'''
			external Port inputEvent
			external Port outputEvent
			SAP timingService: PTimer
		}
		Behavior {
			StateMachine {
				State waitForEvent
				Transition init1: initial -> waitForEvent {
					action '''
						timingService.startTimeout(PERIOD_OF_ACTIVATION_MS);
						nextActivation = System.currentTimeMillis();                   
					'''
				}
				Transition eventHappened: waitForEvent -> waitForEvent {
					triggers {
						<eventHappened: inputEvent>
					}
					action '''
						eventHappened = true;
					'''
				}
				Transition tr0: waitForEvent -> waitForEvent {
					triggers {
						<timeout: timingService>
					}
					action '''
						long timeStart = System.currentTimeMillis();
						nextActivation += PERIOD_OF_ACTIVATION_MS;
						if(eventHappened){
						    outputEvent.eventHappened();
						    eventHappened = false;
						}
						long timeEnd = System.currentTimeMillis();
						long duration= timeEnd - timeStart;
//						System.out.println("Water monitoring duration: " + duration);
						if (duration > worstExecutionTime){
							worstExecutionTime = duration;
							System.out.println("WCET water monitoring: " + worstExecutionTime);
						}
						timingService.startTimeout(calculateWaitTime(nextActivation));						
					'''
				}
			}
		}
	}

	eventdriven ProtocolClass EventHappened {
		outgoing {
			Message eventHappened()
			Message normalLevel()
		}
	}

	eventdriven ActorClass HighWaterSensor extends InterruptSensor {
	}

	eventdriven ActorClass LowWaterSensor extends InterruptSensor {
	}
}
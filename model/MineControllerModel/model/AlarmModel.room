RoomModel AlarmModel {

	ActorClass Alarm {
		Interface {
			Port alarmReceiver [*]: AlarmSender
			conjugated Port p0: TcpCommunication.PTrafficLightInterface
		}
		Structure {
			usercode2 '''
				private void printMessage(String message){
				System.out.println("#################ALARM#########################");
				System.out.println(message);
				p0.setAlarm(message + "\n");
				System.out.println("###############################################");
				}
			'''
			external Port alarmReceiver
			external Port p0
		}
		Behavior {
			StateMachine {
				State initialState

				Transition hghMethane: initialState -> initialState {
					triggers {
						<alarmHighMethaneLevel: alarmReceiver>
					}
					action '''
						printMessage("Visok nivo CH4");
					'''
				}
				Transition lowAirFlow: initialState -> initialState {
					triggers {
						<alarmLowAirFlow: alarmReceiver>
					}
					action '''
						printMessage("Nizak protok vazduhas");
					'''
				}
				Transition highCarbonMonoxyde: initialState -> initialState {
					triggers {
						<alarmHighCarbonMonoxydeLevel: alarmReceiver>
					}
					action '''
						printMessage("Visok nivo CO");
					'''
				}
				Transition errorReadingMethane: initialState -> initialState {
					triggers {
						<alarmErrorReadingMethane: alarmReceiver>
					}
					action '''
						printMessage("Dve greske prilikom citanja nivoa CH4");
					'''
				}
				Transition errorReadingAirFlow: initialState -> initialState {
					triggers {
						<alarmErrorReadingAirFlow: alarmReceiver>
					}
					action '''
						printMessage("Dve greske prilikom citanja protoka vazduha");
					'''
				}
				Transition errorReadingCarbonMonoxyde: initialState -> initialState {
					triggers {
						<alarmErrorReadingCarbonMonoxyde: alarmReceiver>
					}
					action '''
						printMessage("Dve greske prilikom citanja nivoa CO");
					'''
				}
				Transition errorStartingPump: initialState -> initialState {
					triggers {
						<alarmErrorStartingPump: alarmReceiver>
					}
					action '''
						printMessage("Greska prilikom startovanje pumpe");
					'''
				}
				Transition errorStoppingPump: initialState -> initialState {
					triggers {
						<alarmErrorStoppingPump: alarmReceiver>
					}
					action '''
						printMessage("Greska prilikom gasenja pumpe");
					'''
				}
				Transition errorReadingWaterFlow: initialState -> initialState {
					triggers {
						<alarmErrorReadingWaterFlow: alarmReceiver>
					}
					action '''
						printMessage("Dve greske prilikom citanja protoka vode");
					'''
				}
				State connect
				Transition init0: connect -> initialState {
					triggers {
						<connected: p0>
					}
				}
				Transition init1: initial -> connect {
					action '''p0.connect(4020);'''
				}
			}
		}
	}

	ProtocolClass AlarmSender {
		incoming {
			Message alarmHighMethaneLevel()
			Message alarmLowAirFlow()
			Message alarmHighCarbonMonoxydeLevel()
			Message alarmErrorReadingMethane()
			Message alarmErrorReadingAirFlow()
			Message alarmErrorReadingCarbonMonoxyde()
			Message alarmErrorStartingPump()
			Message alarmErrorStoppingPump()
			Message alarmErrorReadingWaterFlow()
		}
	}
}
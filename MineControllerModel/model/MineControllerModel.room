/* 
 * Shortkeys:
 *	Ctrl+Space	- content assist
 * 	F3			- open declaration of selected element
 *	Alt+S 		- open structure diagram
 *  Alt+B 		- open behavior diagram
 *  Alt+M 		- open textual editor (in diagrams)
 */
RoomModel MineControllerModel {

	import etrice.api.types.*
	import etrice.api.timer.*
	import EnvironmentModel.*
	import PoolingSensorModel.*
	import WaterTankModel.*
	import InterrupSensorModel.*
	
  
	LogicalSystem LogSys {
		SubSystemRef subSystemRef: SubSysClass
	}

	SubSystemClass SubSysClass {
		ActorRef topActor: TopActor

		ActorRef timingService: ATimerService
		LayerConnection ref topActor satisfied_by timingService.timer
		LogicalThread defaultThread
	}

	ActorClass TopActor {
		Structure {
			ActorRef highWaterSensor: HighWaterSensor
			ActorRef lowWaterSensor: LowWaterSensor
			ActorRef waterFlowSensor: WaterFlowSensor

			ActorRef pumpMotor: PumpMotor

			ActorRef console: Conole
			ActorRef environmentMonitoringStation: EnvironmentMonitoringStation
			ActorRef pumpControlStation: PumpControlStation
			ActorRef waterTank: WaterTank

			Binding lowWaterSensor.outputEvent and pumpControlStation.lowWaterSensor
			Binding waterTank.lowWaterLevel and lowWaterSensor.inputEvent
			Binding waterTank.highWaterLevel and highWaterSensor.inputEvent
			Binding highWaterSensor.outputEvent and pumpControlStation.highWaterSensor

			Binding pumpControlStation.controlMotor and pumpMotor.controlMotor

			ActorRef waterPumpTunnel: waterPumpTunnel

			Binding pumpControlStation.waterFlowSensor and waterFlowSensor.poolingSensorCommands
			Binding waterPumpTunnel.waterTenkPump and pumpMotor.drainWater
			Binding waterPumpTunnel.waterTenk and waterTank.drainWater
			Binding waterPumpTunnel.wateflowSensor and waterFlowSensor.poolingSensorSample

			Binding pumpControlStation.methaneLevel and supstanceSendToMotor
			conjugated Port supstanceReceiveFromMonitor [3]: supstanceLevelEvent
			Binding supstanceReceiveFromMonitor and environmentMonitoringStation.supstanceLevel
			Port supstanceSendToMotor: supstanceLevelEvent
		}
	}

	ActorClass PumpControlStation {
		Interface {
			conjugated Port highWaterSensor: EventHappened
			conjugated Port lowWaterSensor: EventHappened
			Port controlMotor: PumpMotorControll
			Port waterFlowSensor: PoolingSensorCommands
			conjugated Port methaneLevel: supstanceLevelEvent
		}
		Structure {
			usercode2 '''
				private boolean isPumpActive = false;
				private int MAX_ERROR_COUNT = 10;
				private boolean shouldGetFlow;
				private int errorCount = 0;
				private int numberOfSameMeasure = 0;
				private static int MAX_TIME_FOR_MOTOR_CHANGE_MS = 900;
				private static int PERIOD_OF_ACTIVATION_MS = 20;
				private static int NUM_OF_NEEDED_MEASURE = MAX_TIME_FOR_MOTOR_CHANGE_MS / PERIOD_OF_ACTIVATION_MS;
				private static int PERIOD_OF_CHECKING_DEVICE = 20;
			'''
			external Port lowWaterSensor
			external Port highWaterSensor
			external Port controlMotor
			external Port waterFlowSensor
			SAP timingService: PTimer
			external Port methaneLevel
		}
		Behavior {
			StateMachine {
				State startCheckingPumpState {
					entry '''
						if (numberOfSameMeasure <= NUM_OF_NEEDED_MEASURE){
							numberOfSameMeasure++;
							timingService.kill();
							timingService.startTimeout(PERIOD_OF_ACTIVATION_MS);
							System.out.println("dalje racunaj");
						} else {
							numberOfSameMeasure = 0;
							waterFlowSensor.startADConverstion();
							shouldGetFlow = true;
							timingService.kill();
							timingService.startTimeout(PERIOD_OF_CHECKING_DEVICE);
							System.out.println("daj racun");
							
						}
					'''
				}
				State lowWaterLevelHandler {
					entry '''
						if (isPumpActive){
							controlMotor.turnOffPump();
							isPumpActive = false;
							numberOfSameMeasure = 0;
							shouldGetFlow = false;
							timingService.kill();
							timingService.startTimeout(PERIOD_OF_ACTIVATION_MS);
						}
					'''
				}
				State highWaterHandler {
					entry '''
						if (!isPumpActive){
							controlMotor.turnOnPump();
							isPumpActive = true;
							numberOfSameMeasure = 0;
							shouldGetFlow = false;
							timingService.startTimeout(PERIOD_OF_ACTIVATION_MS);
						}
					'''
				}
				State init
				State errorRead
				State valueRead
				TransitionPoint lowWaterTP
				TransitionPoint highWaterTP
				Transition init0: initial -> init
				Transition lowWaterHappened: my lowWaterTP -> lowWaterLevelHandler {
					triggers {
						<eventHappened: lowWaterSensor>
					}
				}
				Transition c: my highWaterTP -> highWaterHandler {
					triggers {
						<eventHappened: highWaterSensor>
					}
				}
				Transition initialTimeOut: startCheckingPumpState -> startCheckingPumpState {
					triggers {
						<timeout: timingService guard '''!shouldGetFlow'''>
					}
				}
				Transition tr1: startCheckingPumpState -> askForStatus {
					triggers {
						<timeout: timingService guard '''shouldGetFlow'''>
					}
				}
				Transition t: askForStatus -> statusGet {
					triggers {
						<sendStatus: waterFlowSensor>
					}
					action '''
						int status = transitionData;
						if (status == PoolingSensorCommands.Status.NOT_READY.ordinal()){
								errorCount = 0;
								waterFlowSensor.readErrorRegister();			
						}
						if (status == PoolingSensorCommands.Status.ERROR.ordinal()){
							System.out.println("Error while geting water flow");
							errorCount++;
							if (errorCount >= MAX_ERROR_COUNT && isPumpActive){
								System.out.println("Too mutch errors while getting flow, turrning off pump");
								errorCount = 0;
								controlMotor.turnOffPump();
								waterFlowSensor.startADConverstion();
								timingService.kill();
								timingService.startTimeout(PERIOD_OF_CHECKING_DEVICE);		
							}		
						}
						if (status == PoolingSensorCommands.Status.READY.ordinal()){
							 waterFlowSensor.readValueRegister();
						}
					'''
				}
				Transition tr0: statusGet -> askForStatus {
					triggers {
						<timeout: timingService>
					}
				}
				State askForStatus {
					entry '''
						waterFlowSensor.readStatus();
					'''
				}
				State statusGet {
				}
				Transition tr2: statusGet -> valueRead {
					triggers {
						<sendValueRegister: waterFlowSensor>
					}
					action '''
						double waterFlow = transitionData;
						if (isPumpActive && waterFlow == 0){
							System.out.println("Pumpa aktivna a protok vode ne postoji");
						}
						if (!isPumpActive && waterFlow != 0){
							System.out.println("Pumpa iskljucena a protok vode postoji");
						}
						if (isPumpActive && waterFlow != 0){
							System.out.println("Pumpa radi i protoka ima");
						}
						if (!isPumpActive && waterFlow == 0){
							System.out.println("Pumpa ne radi  i nema protoka");
						}
					'''
				}
				Transition tr3: statusGet -> errorRead {
					triggers {
						<sendErrorRegister: waterFlowSensor>
					}
				}
				Transition tr4: lowWaterLevelHandler -> startCheckingPumpState {
					triggers {
						<timeout: timingService>
					}
				}
				Transition tr5: highWaterHandler -> startCheckingPumpState {
					triggers {
						<timeout: timingService>
					}
				}
			}
		}
	}

	ActorClass Conole {
	}

	eventdriven ActorClass HighWaterSensor extends InterruptSensor {
	}

	eventdriven ActorClass LowWaterSensor extends InterruptSensor {
	}

	ActorClass WaterFlowSensor extends PoolingSensor {
	}

	ActorClass CarboniteMonoxideSensor extends PoolingSensor {
	}

	ActorClass MethaneSensor extends PoolingSensor {
	}

	ActorClass AirFlowSensor extends PoolingSensor {
	}

	ActorClass PumpMotor {

		Interface {
			conjugated Port controlMotor: PumpMotorControll
			Port drainWater: DrainWater
		}
		Structure {
			usercode2 '''
				private static double WATER_DRAIN_ML_PER_MS = 10;
				private static int MOTOR_CHANGE_MODE_TIME_MS = 900;
				private static int SLEEEP_TIME_IN_MS = 10;
				private int timeElapsedToTurnOf = 0;
				private boolean shouldChangeToTurnOff = false;
			'''
			external Port controlMotor
			external Port drainWater
			SAP timingService: PTimer
		}
		Behavior {
			StateMachine {
				State initState {
					entry '''					'''
				}
				State motorTurnOn
				State motorTurnOff {
					entry '''
						//					System.out.println("Motor se iskljucuje");
					'''
				}
				Transition init0: initial -> initState
				Transition tr0: initState -> motorTurnOn {
					triggers {
						<turnOnPump: controlMotor>
					}
					action '''
						timingService.kill();
						timingService.startTimeout(MOTOR_CHANGE_MODE_TIME_MS);
					'''
				}
				Transition tr1: initState -> motorTurnOff {
					triggers {
						<turnOffPump: controlMotor>
					}
					action '''
						timingService.kill();
						timingService.startTimeout(MOTOR_CHANGE_MODE_TIME_MS);
					'''
				}
				Transition tr2: motorTurnOff -> motorTurnOn {
					triggers {
						<turnOnPump: controlMotor>
					}
					action '''
						timingService.kill();
						timingService.startTimeout(MOTOR_CHANGE_MODE_TIME_MS);
					'''
				}
				Transition tr3: motorTurnOn -> changeModeFromOnToOff {
					triggers {
						<turnOffPump: controlMotor>
					}
					action '''
						timeElapsedToTurnOf = 0;
						shouldChangeToTurnOff = false;
						timingService.kill();
						timingService.startTimeout(SLEEEP_TIME_IN_MS);
					'''
				}
				Transition tr4: motorTurnOn -> motorTurnOn {
					triggers {
						<timeout: timingService>
					}
					action '''
						drainWater.drainWater(WATER_DRAIN_ML_PER_MS * SLEEEP_TIME_IN_MS);
						timingService.kill();
						timingService.startTimeout(SLEEEP_TIME_IN_MS);
					'''
				}
				State changeModeFromOnToOff
				Transition tr5: changeModeFromOnToOff -> changeModeFromOnToOff {
					triggers {
						<timeout: timingService guard '''!shouldChangeToTurnOff'''>
					}
					action '''
						timingService.kill();
						timingService.startTimeout(SLEEEP_TIME_IN_MS);
						timeElapsedToTurnOf += SLEEEP_TIME_IN_MS;
						drainWater.drainWater(WATER_DRAIN_ML_PER_MS * SLEEEP_TIME_IN_MS);
						if (timeElapsedToTurnOf == MOTOR_CHANGE_MODE_TIME_MS){
							shouldChangeToTurnOff = true;
						}
					'''
				}
				Transition tr6: changeModeFromOnToOff -> motorTurnOff {
					triggers {
						<timeout: timingService guard '''shouldChangeToTurnOff'''>
					}
				}
				Transition tr7: changeModeFromOnToOff -> motorTurnOn {
					triggers {
						<turnOnPump: controlMotor>
					}
					action '''
						timingService.kill();
						timingService.startTimeout(MOTOR_CHANGE_MODE_TIME_MS);
					'''
				}
			}
		}
	}

	ProtocolClass PumpMotorControll {
		outgoing {
			Message turnOnPump()
			Message turnOffPump()
		}
	}

	ProtocolClass HighWaterSensorInterrupt {

		outgoing {
			Message waterLevelIsHigh()
		}
	}

	ProtocolClass CustomTransition {
		outgoing {
			Message goToState()
		}
	}
}
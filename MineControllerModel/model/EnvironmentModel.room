RoomModel EnvironmentModel {

	import etrice.api.types.*
	import etrice.api.timer.PTimer

	ActorClass EnvironmentMonitoringStation {
		Interface {

			Port supstanceLevel [3]: supstanceLevelEvent
		}
		Structure {
			Binding environmentPooling.poolingAirFlow and airFlowSensor.poolingSensorCommands
			Binding environmentPooling.poolingMethane and methaneSensor.poolingSensorCommands
			Binding environmentPooling.poolingCarbonMonohyde and carboniteMonoxideSensor.poolingSensorCommands
			Binding environmentPooling.methaneSensor and methaneSensor.poolingSensorSample
			Binding environmentPooling.airFlowSample and airFlowSensor.poolingSensorSample
			Binding environmentPooling.carboniteMonoxydesSensor and carboniteMonoxideSensor.poolingSensorSample
			ActorRef methaneSensor: MineControllerModel.MethaneSensor
			ActorRef carboniteMonoxideSensor: MineControllerModel.CarboniteMonoxideSensor
			ActorRef airFlowSensor: MineControllerModel.AirFlowSensor

			ActorRef environmentPooling: EnvironmentPooling
			Binding environmentPooling.supstanceLevel and supstanceLevel
		}
	}

	ActorClass EnvironmentPooling {
		Interface {
			Port poolingAirFlow: PoolingSensorModel.PoolingSensorCommands
			Port poolingMethane: PoolingSensorModel.PoolingSensorCommands
			Port poolingCarbonMonohyde: PoolingSensorModel.PoolingSensorCommands
			conjugated Port airFlowSample: PoolingSensorModel.PoolingSensorSample
			conjugated Port methaneSensor: PoolingSensorModel.PoolingSensorSample
			conjugated Port carboniteMonoxydesSensor: PoolingSensorModel.PoolingSensorSample
			Port supstanceLevel [3]: supstanceLevelEvent
		}
		Structure {

			usercode2 '''
				private static int METHANE_LEVEL_EVENT = 0;
				private static int CARBON_LEVEL_EVENT = 1;
				private static int AIR_FLOW_LEVEL_EVENT = 2;
				private static int PERIOD_OF_CHECKING_DEVICE = 20;
				
			'''
			external Port poolingAirFlow
			external Port poolingMethane
			external Port poolingCarbonMonohyde
			external Port airFlowSample
			external Port methaneSensor
			external Port carboniteMonoxydesSensor
			SAP timingService: PTimer
		}
		Behavior {
			StateMachine {
				State InitialState
				Transition init0: initial -> InitialState {
					action '''
						poolingMethane.startADConverstion();
						poolingAirFlow.startADConverstion();
						poolingCarbonMonohyde.startADConverstion();
						timingService.startTimeout(PERIOD_OF_CHECKING_DEVICE);
					'''
				}
				Transition tr0: InitialState -> InitialState {
					triggers {
						<timeout: timingService>
					}
					action '''
						poolingAirFlow.readStatus();
						poolingMethane.readStatus();
						poolingCarbonMonohyde.readStatus();'''
				}
				Transition tr1: InitialState -> InitialState {
					triggers {
						<sendStatus: poolingAirFlow>
					}
				}
				Transition tr2: InitialState -> InitialState {
					triggers {
						<sendStatus: poolingMethane>
					}
					action '''
						int status = transitionData;               
                        if (status == PoolingSensorCommands.Status.NOT_READY.ordinal()){
                                errorCount = 0;
                                poolingMethane.readErrorRegister();            
                        }
                        if (status == PoolingSensorCommands.Status.ERROR.ordinal()){
                            System.out.println("Error while geting water flow");
                            errorCount++;
                            if (errorCount >= MAX_ERROR_COUNT){
                                errorCount = 0;
                                waterFlowSensor.startADConverstion();
                                timingService.kill();
                                timingService.startTimeout(PERIOD_OF_CHECKING_DEVICE);      
                            }       
                        }
                        if (status == PoolingSensorCommands.Status.READY.ordinal()){
                             poolingMethane.readValueRegister();
                        }
                '''
				}
				Transition tr3: InitialState -> InitialState {
					triggers {
						<sendStatus: poolingCarbonMonohyde>
					}
				}
			}
		}
	}

	ProtocolClass supstanceLevelEvent {

		outgoing {
			Message highLevel()
			Message normalLevel()
		}
	}
}